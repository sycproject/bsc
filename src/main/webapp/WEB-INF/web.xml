<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  id="WebApp_ID" version="3.0">
  <display-name>springMyBatis</display-name>
  
  <!-- web.xml 的加载顺序是：context-param -> listener -> filter -> servlet ，
	而同个类型之间的实际程序调用的时候的顺序是根据对应的 mapping 的顺序进行调用的 -->
  
  <!-- spring context config -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:spring-app.xml</param-value>
  </context-param>

  <!-- Creates the Spring Container shared by all Servlets and Filters（父容器：创建一个WebApplicationContext上下文对象，保存在servletContext对象中） -->
  <!-- spring上下文载入监听器，确保web服务启动时，spring已经完成初始化 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  
  <!-- Character Encoding Filter -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  

  <!-- Processes application requests(Spring MVC：子容器) -->
  <servlet>
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath*:/spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>
  </servlet>

	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>

  <servlet-mapping>
    <servlet-name>springMVC</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  
  <!-- DruidStatView -->
  <servlet>
    <servlet-name>DruidStatView</servlet-name>
    <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    <init-param>
      <param-name>allow</param-name>
      <param-value>127.0.0.1</param-value>
  	</init-param>
  </servlet>
  <servlet-mapping>
      <servlet-name>DruidStatView</servlet-name>
      <url-pattern>/druid/*</url-pattern>
  </servlet-mapping>
  
  
  <!-- session setting -->
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
  
  <!-- welcome page -->
  <welcome-file-list>
  	<welcome-file>index.jsp</welcome-file>
    <!-- <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file> -->
  </welcome-file-list>
  
  
  <!-- 通过错误码来配置error-page ,配置了当系统发生404错误时，跳转到错误处理页面404.jsp。 -->
	<error-page> 
	    <error-code>404</error-code> 
	    <location>/WEB-INF/views/error/404.jsp</location> 
	</error-page> 
	<!--  通过异常的类型配置error-page ,配置了当系统发生java.lang.NullException（即空指针异常）时，跳转到错误处理页面error.jsp  -->
	<error-page> 
	    <exception-type>java.lang.NullPointerException</exception-type> 
	    <location>/WEB-INF/views/error/error.jsp</location> 
	</error-page>
  
  
</web-app>